    Certified Appication Developer

SNOW is table Triggered JavaScript

Scripting Overview

1. What is platform Scripting?
Platform Scripting allows complex configuartion and behaviours via JS

However, when making changes to your instance use the Condition Builder wherever possible to 
configure starightforward conditions and actions

SNOW whenever goes to read a table it reads the other supporting tables like UI policies and other tables and when
it encounters these tables and the JS script written in it, then it runs the JS scripts

2. Why to not script in SNOW?
    a. SNOW is continually evolving and the earlier scripts may not be necessary
    b. Easier to debug and fix configuration changes thatn customization
    c. Make sure the script is really needed
        1. How business critical is this script
        2. Will an ACL perform what is needed instead?
        3. Can you acheive at least 805 of requirements via configuration changes instead of scripting
    d. consider ways of customizing without scripting

3. When should you script?
    a. Add new functionality
    b. Extend existing functionality
    c. Guide users through messaging
    d. Automate processes
    e. Interact with third party applications

4. Customization best practices

SNOW is always trying to make the upgrade process easier. Adopting this process help wiht future upgrades to your instance 

If a No code/Low code approach cannot be determined then Modify the baseline records and Review and revert the skipped record adter an Upgrade

5. Where do scripts execute?
    a. Client Side (Browser):
        -   Auto-populate a field based on value of another field 
        -   show hidden form sections

    #   Client Scripts
        UI Policies
        Catalog Scripting

    b. Server Side
        -   Modify a database record
        -   Trigger a flow

    #   Business Rules
        GlideSystem
        GlideRecord
        Script Includes
        Flow Designer
    
    c. On a Mid Server
        -   Integrate to a third party application

6. Who can Script?
    a. System Admininstrator
        Manages all the features, applications and data in the platform 
    b. System Definition Admininstrator
        Manage a specific systme Definition 
        Ex: Can only manage Business Rules
    c. Application Admininstrator

7. How to script in SNOW?
    Using Script editor available in the SNP 

8. Syntax editor Macros
    These provides shourtcuts for commonly used code
    Insert a macro by typing the macro Name and pressing <TAB>
    Macro name is replaced with full macro text

RESULT: of help <TAB>

The Syntax Editor macros are:
-----------------------------
testNewFunctions - Use this Macro to test the functions from the ValidatorNew script include
doc - Documentation Header 
for - Standard loop for arrays
vargror - Example GlideRecord Or Query
info - 
method - Standard JavaScript Class Method
vargr - A common pattern of creating and querying a GlideRecord

####

Locating your script Quickly

Navigate directly to Table configuartion

Ex: incident.config will display all the configuartion changes made to that table

### Application Scopes

Every Application has a scope
Determines which resources are availableto other application
Once the scope is assigned to an application, it cannot be changed!!!

Application Scopes protects an application and its artifcacts from damage to, or from other applications
Must be configured to grant other applicationthe ablity to act on its record

# Application Scope: Scope Namespace Identifier

The system automatically prefixes a namespace identifier to scoped application artifcats (including scripts)
Canneot be changed or removed to ensure they are always associated with the proper application

    Scoped application artifcacts always begins wiht x_
    Then the vendor prefix, SNC 
    Then the application ID - Set when the application is first created
    Script Name - unique script name

    This example generates the namespace identifier: x_cld_travel_ExpensesReqBy


# Application Scope: Updating Scripts in Another Scope

Out of scope scripts are read-only

# JS in SNOW

Client Side Classes
    GlideAjax#
    GlideForm*
    GlideList*
    GlideRecord#
    GlideUser 
    GlideList
    spModal - Used for Mobile user popups and stuff

    * Mostly used for visual changes
    # Also used in Server Side/ Data ceter side

Server Side Classes
    GlideAggregate
    GlideDateTime
    GlideElement
    GlideRecord
    GlideQuery
    GlideSystem
    JSON
    Workflow

JS in SNOW - API Documentation 
Available at: https://developer.servicenow.com/dev.do#!/home

Click on References and APIs: 
    Server Scoped
    Server Global


############ Mod 2 ###############
Client Script Overview: What is a Client Script?
Client Script manage the behaviour of forms, fields and lists in real time.
    -   Make fields Mandatory
    -   Set one field in response to another
    -   Modify choice list options
    -   Hide/show form sections
    -   Hide/fields
    -   Display an alert
    -   Manage/prohibit list ending

Client script executes on client side - Browser may present the info in a different way

Client scripts are not secured, since the info is already loaded in the browser, therefore it should not be used for 
critical access controlling. Use ACLs for those

#Client Scripts are a record in the Client script table
Client scripts table will only run when the conditions are triggered

Diffrent types on Client Scripts
1. onLoad() - will run when the form is loaded and before the control is given to the user
    Typically used to mainpulate a form's appearance or content on the screen
    No argumet present in the onLoad() client script function
2. onSubmit() - Script runs when a form is saved, updated or submitted
    Typically used for field validation
    No argumet present in the onSubmit() client script function
3. onChange() - Script runs when a particular field value changes
    Typically used to
        -   Respond to fild values of interest
        -   Modify one field value in response to another

    Need to define a field onChange script will run.
    It has 5 arguments for it.

    All field values changes when a form loads
    The onChange() Template's if statement aborts script executiong if:
        -   Field value change due to form load
        -   The newValue has no value
4. onCellEdit() - This is executed in list View and not the form View
    Since in the list view it is possible to edit multiple cells at the same time
    the function takes in the parameter as 'oldValues' instead of 'oldValue' like in onChange()

    Using this we can modify multiple records at the same time

##### Client Side APIs
# Client-side APls: What Data Can You See in a Client Script?

Use ServiceNow's predefined client-side classes and methods to
    - Control how the platform looks and behaves in a web browser
    - Enhance the end user experience
    This class reviews the most popular Client-side APls
    -   g_form (GlideForm)
    -   g_User (GlideUser)
    -   g_scratchpad (in conjunction with a Display Business Rule)

Anytime there is a mention of 'g_' it signifies that it is happening in the clien side

#Glide is the original name of SNOW - GlideSoft


GlideForm API provides useful method to
    -   Customize forms 
    -   Manage form fields and their data

commonly used g_form method examples:
    - Draw attention to an area on the form: flash(), showFieldMsg()
    - Get field information: getValue)
    - Change a field value: setValue(), clearValue()
    - Change a choice list: add0ption(), clearOptions()
    - Get form information: getSections(), isNewRecord()
    - Add/clear form messages: addFormMessage(), clearAllFormMessages()

NOTE: 
    -   g_form object methods refer to fields by their field name, not their label
    Easy way to locate a field name
        -   Right-click a field's label
        -   The field name appears on the Context menu

Use Developers portal to get more info on the g_form global object or other objects for in-depth Documentation

# getValue method
    g_form.getValue() is a very commonly used g_form method
    Retrieves a field value from the form (not the database)
    Pay close attention to the field's data type when using this method

For Example: g_form.getValue for a string will return string but for a choice it will return an integer

getValue on a Reference fields will return the Sys_Id

## Glide user
Glide user API provides useful methods to access info about the currently logged in user
Access GlideUser Methods using the g_user global object

Note: g_user is globally scopeed


## Client Script Debugging
    Many times, your scripts do not work as expected
    You can debug them using the following strategies:
        - ServiceNow built-in client-side debugging tools
            Script debug messages
            Response Time Indicator
        - Javascript debugging tools
            alert()
            try/catch
        - Browser tools (for example, JavaScript console, Web Console)
        - Third-party tools

You can use addInfoMessage() also to co do debugging as it can be a lot more convinient to do so

Response time Indicator, it is available in the lower right corner, the clock shows the amount of time spent
on processing on the client side, server side and the network

For JS bsaed debugging you can use

try{

} catch(){

}

## Reference Objects
Reference Object records exist on a table other than a form's currently loaded table
Reference Object data is not loaded into forms
Client-side scripts only have access to data on forms

Now how do we get the data of that reference object??

# Reference Objects: Scripting with Reference Objects
- Forms only store a Reference Object's sys_id
- Reference Object fields cannot be directly referenced from a Client Script
- Retrieving Reference Object fields requires a trip to the server and back
    - Server trips take time
    - Make as few trips as possible!

## Script Table is a related table to Client Script

    Track changes to the record
    Created automatically every time a script is saved, submitted or updated
    Can compare versions to see differences
    Can revert to a previous version of a script

## Recap of Client Script
    Core Concepts
        Client Scripts execute in the browser
        Ihe g_form object has access to a form's fields and data
        The g_user object has access to information about the curently logged-in user
        Design your scripts for Desktop, Mobile/Service Portal or All
        Quickly undo changes by reverting to an older version of a script


######## Module 3 ############
## UI Policy

What is a Ul Policy?
Defines the behavior and visibility of fields on
    - Mandatory
    - Visible
    - Read-only
Condition must be true for it to execute on a form
Executes after Client Scripts

Example: After Ul Policy executes
    'Number is read-only
    'Configuration item' is mandatory
    'Priority' is not visible

UI Policy execution:
1. Trigger specifies when to execute
2. UI Policy Actions and/or Scripts specify what to execute
3. Every field in the record can be evaluated even if it is not visible on the form 
4. UI Policies do not have a Name field
    Use the Short description field as a pseudo name
5. Not all UI Policies require scripting

#UI Policy Trigger When to Apply
1. UI Policies execute based on evaluation of the Conditions
    - Build conditions with the Condition Builder rather than scripting for better performance
    - If left blank, the UI Policy logic always executes

Application need:                   |   Client Script    | UI Policy
Execute on form load                |X                   |X
Execute on form save/submit/update  |X                   |                   
Execute on form field value change  |X                   |X
Have access to a field's prior value|X                   |
Execute on list field value change  |X                   |
Execute after Client Scripts        |                    |X
Require scripting                   |X                   |


# Good Practice
1. Use as few UI Policies as possible to avoid long page load times
2. Use the short descriptionfield to name the UI policy 
3. Add the description field ot form to thorughly document the UI Policy
4. Set onLoad to false if you do not need to execute on page load 
5. Apply conditions using the condition builder, whenever possible

# Core Concepts of UI policy
1. UI Policies are used for client-side form management
2. UI Policies take actions based on scripts and/or UI Policy Actions
3. UI Policies can be created for tables in the same scope
4. Debug Ul Policies using addlnfoMessage() and addErorMessage()
5. Different actions are available if the condition returns true or false

## Catalog Client Scriptand Catalog UI Policies
This manages teh behaviour of catlog items when presented to users

#Everything on a service catlog form is a service catalog variable set and not a field in a table
# Example use case
    -   Suppose a certain variable of choice has been marked as true, then the corresponding field should be
        auto-filled. This can be achieved thru using catalog client scripts

# There is seperate table for: "Catalog Client Script"
It is same as general client script, and works mostly in the same manner

Similar to UI Policy we have Catalog UI Policy
1. Manages the behavior of Catalog Items when presented to your users 
2. Offers the use of theCondition builder to easily configure a condition vs.Scripting it
3. Condition must be true for the policy to execute

## Variable SETS   ## Important
1. Catalog Client scripts and Catalog UI Policies can also apply to Variable set
2. Executes every time the variable set is used

otherwise you will have to create the same catlog UI policy for all the individual catlog item, that is too much work
Just use it using Variable set and make a catalog UI policy on it or write a catlog client Scripts

Both Catalog Item variables and Variable Set variables are available to Catalog Client Scripts and Catalog UI Policies
Allows you to manage the behavior of any variable at the Catalog Item level

# What Data Can You See in Catalog Client Scripts and Catalog UI Policies?
    -   Local variables declared in a script
    -   Predefined client-side Global variables, such as
        - g_form (GlideForm)
        - g_user (GlideUser)

## Core Concepts of catalog Client Scripts & Catalog UI Policies
    -Catalog Client Scripts and Catalog Ul Policies manage the behavior of Catalog ltems
    -Execute in the browser
    -Variables in a condition mUst be visible (even if it is hidden or read-only) on the form layout for the
    condition to be tested
    -Catalog Client Scripts and Catalog UI Policies can also be applied to Variable Sets
    -Behavior of variables can be managed at the Variable Set level or the Catalog Item level


############ Business Rule ##############

# What is BR?
    JavaScript that runs when
    -   A table is queried
    -   A record is displayed, inserted, updated or deleted (CRUD operations)
    Can be used to change values in fields when certain conditions are met

    Execute server-side
    - Faster
    - Does not monitor forms or lists

# When BR runs?
- Watches the database for record access and responds to select access types 
- Trigger specifies when to run (execute)
- Not all Business Rules require scripting

# Different types of BR
1. Before Query Rules 
2. Display
3. Before Rules 
4. After Rules
5. Async Rules

# What BR Executes?

    ACTION                  BR Execution        ACTION              BR Execution    ACTION
User or System Query -> Before Query Rules  -> Database Query -> Display Rule -> Form Submit
                        (QVR)//aka Query rule 
    BR Execution    ACTION              BR Execution    BR Execution
-> Before Rules -> Database Update  -> After Rules -> Async Rules 


    ACTION                  |   BR Execution
1. User or System query     |   Before Query Rule / Query Rule aka QVR
2. Database Query           |   Display Rules //When it is rendering but before you get the control
3. Form Submit              |   Before Rules
4. Database Update          |   After Rules 
5.                          |   Async Rules

## Types of BR
1. Before Query BR/ Query Rule: 
    Executes before a query is sent to the database
    -This can be used to reduce what the user is able to see, since we will have access to the entire server
    Example: Prevent users from one location seeing CIs from another

2. Display Rules: No control is given to the user 

    -    Execute after the data is read from the database and before the form is presented to the user
    -   Primary purpose is to populate the g_scratchpad global object
    -   Example: Provide Client Scripts with access to data from other records

3. Before Business Rules
    Execute after form submission and before record is updated in the database
    Example: Populate 'closed_by' with the name of the currently logged in user

    It interupts the operation right before it happens

4. After Business Rule:
    Execute after form submission and record update in the database
    Example: Cascade changes made to the approval field of a Service Catalog request to the requested items attached to that request

5. Async Business Rule:
    Execute after records are inserted/modified/queried
    Run asynchronously as Scheduled Jobs
    - Notify subscribers when Cls are affected by an Incident
    - SLA calculations

# What Business Rules Execute?
    BR executes their corresponding Actions, you can set field values/show message/ supress the record OR set abort action
    Dynamic Syntaxing is also possible in BR messages
        Ex: Incident ${Number} opened successfuly
    
    Advanced Tab in BR
    1. Codition Filter is available in the Advanced tab 
    2. Script Segment: 


## Server-side Global Variables 

# What data can you see in a BR?
    -   Local Variable declared in a script
    -   Predefined server-side Global Variables
        -   current
        -   previous
        -   g_scratchpad
                Display BR only
                Works in conjunction with a client script

    EXPLANATION: Now in client side to get the value of a particular field we need to use:
        g_form.getValue('short_description) and then assign it to a variable but in 

    Server-Side: There is no need to do all this just using:
        - current.short_description will get the current value in the server-side
        - similarlly previous.short_description will get what was previously stored on the server-side
            
            previous bascically gives what is the value currently scored in Server

        Now g_scratchpad is just

        if(current.state >= 5 && previous.state < 5) {
            var reOpened = true;
            g_scratchpad.createdBy = current.sys_created_by;
            g_scratchpad.caller = current.caller_id;
        }

##########################################
Everything in SNOW is a record in a table
#########################################
Every SNOW record is a JS Object or GlideRecord object

## Dot-Walking
Allows direct access to fields for related records (reference objects) by traversing tables
    EXAMPLE:
    <object>.<reference object name>,<field of interest>
    current.caller_id.department.name Example


To assist in Dot Walking there is something called as Script tree which helps in finding the existence of the 
value in a related table

Dot Walking works only with ServerSide scripting and doesn't work with Client Side Scripting

# Server-side debugging

    Server Side Debugging tools
        GlideSystem logging methods
        Debug Business Rules module
        Script Debugger
        Script Tracer
        Console Debugger
    
    JS debugger
    Try/Catch/Finally 

################################################
gs - stands for GlideSystem     i.e., Server-side

################################
Sends debugging information to the system log

gs.info() - Used for informational events, such as messages that describe the progress of the application.
gs.log() - This always logs a message when used in the global scope.
gs.eror() - Used for critical errors that are encountered; the issue is logged.
gs.warn() - Used for logging; ocCurs when there might be an issue.
gs.debug() Logging occurs when in debug mode or when session debug for that application is enabled.


Sends debugging info to the top of the form:

gs.addlnfoMessage()
gs.addErrorMessage(
gs.methodName(<message>);
gs.info("The record was opened: " +CUrent.opened_at);

###########
Important - USE SCRIPT DEBUGGER TO DO PROPER DEBUGGING 
###########
To debug your code properly use "Script Debugger" available in system diagnostics

Used for debugging server-side JavaScript
-Opens in a separate browser window along with Script Tracer and the Session Log
###########

##################################
    Script Debugger must be open    
    Script must have a breakpoint set
    Script must be executing in the same interactive session as the user with the breakpoints
    Script debugging is session and user specific
        - Only you are affected by your breakpoints 
            If you have a breakpoint at a point in code, your co-workers will never see it
        - Cannot step through scripts running asynchronously
            Async Business Rules
            Scheduled Jobs
            Inbound email actions


Script Debugger - Multiple Developer Support
    Allows multiple developers to debug their own transactions without affecting each other

Script Tracer(System diagnostics>Script Tracer): 

####################### 
Core Concepts of BR and Debugging
####################
    Business Rules execute when records are accessed:
        When
        Insert/Update/Query/Delete
        Condition
    Debug Business Rules with log messages written to files or to forms
    Use Global Object Variables: previous, curent, g_Scratchpad
    Dot-walking allows 'table hopping' between related tables


###############################
SNOW Glide Script
###############################

Glide System API can be used everywhere in the system where you use a server side script

Wrte test and Debug BR

# What is Glide system API
    -   its a collection of Methods
    -   Executes ate Server-side
    -   Access System Level information
        -   Logged in user
        -   System 
        -   Date and Time 

# Example of User Method in Gldie Script
    Return information about the currently logged in user
    Examples
    -getUser(), getUserName(), getUserID(), getUserDisplayName()
    - hasRole(), hasRolelnGroup()

    EXAMPLE in a Script:
    if (gs.hasRole ( 'itil')) {
        gs.addInfoMes sage ("getUser() returns : " gs.getUser ());
        gs.addInfoMes sage ("getUserName () returns: " + gs.getUserName ()) 5
        gs.addInfoMes sage ("getUserDisplayName () returns :" + gs.getUserDisplayName ()) ;|
        gs.addInfoMes sage("getUser ID () returns: "+ gs.getUserID () );
    }

##############
Glide Date and Time
##############

Date and Time Methods
Work With Date and Time data
    Examples
        - beginningOf LastWeek(), endOfLastWeek()
        - beginningOfNextMonth(), endOfNextMonth()
        - dateDiff()
        - now(), nowDateTime()
        - minutesAgo(), quartersAgo(), monthsAgo(),yearsAgo()


    Date and Time Method Examples
        var firstDay = current.getDisplayValue ("u_hire_date");
        var lastDay = current. getDisplayValue("u_last_date");
        //If firstDay and lastDay both have values, then check to ensure that lastDay isn't before firstDay
        if (firstDay && lastDay) {
            if (gs.dateDiff(firstDay, lastDay, true) < e) {
            gs.addErrorMessage ("The last day worked must be after the hire date. ");
            current.u_last_date '';
            current. setAbortAction (true);
            }
        }

    //Example of seeing if the Hire date is more than the last date


## GlideDate 
## GlideDateTime

    The GlideDate and GlideDateTime APls are used to manipulate date and time values
    You can create a GlideDateTime object from a GlideDate object by passing in the GlideDate object 
        as a parameter to the GlideDateTime constructor

Example: 
    var gDate = new GlideDate ();
    gDate.setValue ( '2021-12-03 ');
    gs.info(gDate);
    var gDT = new GLideDate Time (gDate);
    gs.info(gDT) ;



## Scoped GlideSystem

    -You must use Scoped APls when developing scripts for scoped applications
    -The Scoped GlideSystem APl provides methods for accessing system-level information in scoped applications
        - Logged in user
        - General system
        -Logging
    - Error messages advise developers when methods are used in the wrong scope
        -   Function Iog is not allowed in scope x travel. Use gs.debug() or gs.info() instead

Scoped GlideSystem Logging Method
    Write log messages in a private application scope
    - debug()
    - error()
    - info()
    - warn()
    - isDebugging()


### GxP for Glide System
    -   Use the appropriate object methods based on your scope 
        -   GlideSystem
        -   Scoped GlideSystem
    -Write validation scripts for forms with dates
        -   Start date validation 
        -   End date validation
    - Use the GlideDateTime methods rather than JavaScript date methods for convenience
    - Check the ServiceNow Developer's portal for the latest information on the GlideSystem and Scoped
        GlideSystem APls and their methods

## Core Concepts of GlideSystem
    -   The GlideSystem and Scoped GlideSystem APls provide methods to access system-level information
    -   GlideSystem methods fall into three categories:
            User
            General
            Date/Time
    -   Scoped GlideSystem methods fall into three categories:
        -    User
        -    General
        -    Logging
    Methods execute server-side


################################
GlideRecord API
################################
Use the GlideRecord API everywhere in the Platform where you use a ServerSide API

# What is a GlideRecord?
    -   Used for database operations instead of writing SQL queries
    -   An object containing zero or more records from the same table (ordered list)
    -   Contains records (rows) and fields (columns)
    -   Executes server-side

    Example: 
    var incidents = new GlideRecord('incident');
    incidents.addQuery( short_description', '', 'Cassette Player );
    incidents.query();
    while (incidents.next ()) {
        incidents.description.setvalue("what is this, the 1970s?");
        incidents.update();
    }

## How to Create a new GlideRecord Query
1. Create a GlideRecord object for the table of interest
2. Build the query conditions
3. Execute the query
4. Process returned records with script logic


Step 1: Create a GlideRecord Object for the Table of Interest
    var myObj = new GlideRecord ('table_name');
    var myObj = new GlideRecord( 'change_request');

Step 2: Build the Query Conditions
    myObj.addQuery('category','=','Hardware');
    myObj.addQuery('priority','!=',1);

Syntax: addQuery(<field_name>, <operator>,<value>)

NOTE: when adding diffrent queries to the same object it acts as an AND operator and not as OR operator of SQL

Step 3: Execute the Query
    myObj.query();

Step 4: Process Returned Records with Script Logic

    while(myObj.next()){
        //Script Logic
        // Reference current record as <object name> <property>
    }
    
    // You can also use if logic to go throught the returend records

    if(myObj.next()){       // if the proccess has only the first record returend
        //Script Logic  
    }
    
    if(myObj.hasNext()){    // Determines if more records exist and then helps in moving through them
        //script logic
    }

NOTE: commonly while loop is used as compared if logic for working with processing of returned records

Use the Update() method to save the changes to the records in the GlideRecord. If the record doesn't exist it is inserted.
similarlly there is inseret, create and delete as well for the records which have been pulled by GlideRecord    

###### FULL EXAMPLE #######
var myObj = new GlideRecord(table_name');
myObj.addQuery(fieldname''operator, value');
myObj.addQuery(field_name',operator, value'");
myObj.query():
while(myObj.next()){
    //Script logic
    //Reference current record as <object name>.<property>
    //Use myObj.update() to save changes made to records
}
######### OR Condition in script Syntax

var myObj = new GlideRecord('change_request');
var q1 = myObj.addQuery('categorty','=','Hardware');
q1.addOrCondition('priority','!='1);

#### Querying just one Record

Sometimes instead of querying the entire database, just getting the single record is also possible

    Example: 
        var myObj = new GlideRecord('incident');
        myObj.get(current.parent_incident);
        myObj.u_rca = true; //Returns true if a record is found or False if a record is not found
        myObj.update();

#####################
Adding Encoded Query
#####################
Systax: 
    GlideRecordObject.addEncodedQuery('<query>');

Go to the list view of the table, create the required filter, right click on breadcrumb and copy query then add it in
encoded query.

############# USECASE of GlideRecord  ###############
Suppose we want to close all the incidents when a problem is supposed to be closed then we can use
the GlideRecord to find all the related incidents attached to that problem and them close all of them in one go

## Scoped GlideRecord - For scoped application development, use GlideRecord methods for database operations

## GlideRecordSecure - 
    Class inherited from GlideRecord
    Performs the same functions as GlideRecord AND enforces ACLs

############### GlideQuery API

#What is it?
    -   Server Side API for querying data
    -   Written 100% JavaScript (global script include)
    -   Uses GlideRecord behind the scenes
# Why?
GlideQuery is guided by three prinicples
    -   Fail Fast
        Improve the feedback loop
        Make error as soon as possible
    -   Be JavaScript
        Behaves like normal JS
        GlideRecord can be confusing with a mixture of java and Javascript elements
    -   Be Expressive
        Do more with less line of code
        Coding style is fluent 


### GlideQuery Example:
new GlideQuery ( " sys_user ")
    .where('department.name"', 'Sales ')
    .where("roles', admin")
    .limit (10)
    . select ("user_name', 'phone', mobile_phone", email")
    .forEach( function (u) {
    gs.info(u.user_name +', '+u. phone+ ', '+u.mobile_phone','u.email);
    });

############# Performance Considerations
# Which one is faster?
# GlideRecord is faster than GlideQuery since there is no conversion involved

############ GxP for GlideRecord/GlideQuery
    -   Use the appropriate object methods based on your scope (GlideRecord, Scoped GlideRecord, GlideQuery)
    -   Use GlideAggregate instead of getRowCount() for large tables and production instances
    -   Perform all record queries in server-side scripts for improved performance
    -   Practice writing the list of records to a log to ensure you do not accidentally insert/update/delete a record using GlideRecord
    -   Use the NiceError function in GlideQuery to find, identify and fix errors

###GlideRecord Core Concepts
    GlideRecords are rows returned from the database
    GlideRecord queries can be created for any table
    The query() method executes a select statement againsta database table
    Use a while loop to iterate over returned GlideRecords 

######## IMPORTANT #####################

Suppose there is an error in specific line of code of the GlideRecord code written, it will skip that line 
and move on to the next ones, therefore very Important to be clear with how it is written

###################################
SCRIPT INCLUDE
###################################

# What is a script include?
    Stores reusable Javascript for execution on the server
    Must be called to run
    Can be client-callable

BASIC CONCEPT: Write once use many times, can be either for Client and Server Callable not both at the same time
The code of script include is always a server side

Overview: Script Include Trigger
    Not many configuration options as a Script Include runs only when called
    Runs server-side
    No default objects
    Data (parameters) passed in from the calling script

# Diffrent Types of Script Include?
1. Store One Classless Function 
    -Stores one re-usable function
    -Used server-side only
    -Can also be referred to as On Demand
2. Define a new Class
    -Collection of functions
    -Can be called by client side scripts
    -Standard to include "Utils" in the name (for example,TravelRequestUtils)
3. Extend an Existing class
    -Adds functionality to an existing Class
    -Can be called from client-side scripts

## Classless/On Demand Script Include
    -   Stores one function
    -   Script include name MUST BE Identical to the function name
    -   Classless/on-Demand Script Includes are not callable from the client-side, even if the Client callable is selected

## Defining a New Class
    -   Stores multiple functions
    -   After the record is named, a Script Editor Macro is inserted in the Script field to help guide you
    -   Script Include name MUST be an EXACT match to the Class name

# Reference Qualifiers : It is a way to target certain functions in a script include, kind of like applying a fancy filter




############################################
Communicating between Client Side and Server Side Using Script Include
############################################################
#One is by using GlideAjax

#JavaScript Object Notation (JSON)
    Data exchange format
    Low overhead alternative to XML
    Serializes and passes data between server and client

#### State Model: Many of the SNOW table use Script Include to define there State model
for Ex: Incident States are defined in IncidentStateSNC which is a script include which contains the states of the Incident


## Server Lookup Best Practices: Minimize Server Lookups
    You have reviewed many ways to get information from the server in class
    The recommended methods are
        -g_Scratchpad
            Sent once when the form loads
        - GlideAjax
            Dynamically triggered when the client requests information from the server

# Application Scope for Script Include

When building a Script Include there is an option called as Accessible from: 
    All application Scope   (Public)
    This Application Scope only     (Private)

#Protection Policy of Script Include:
    Only applies when applications are installed from the ServiceNow App Store or from the application repository
    Sets the level of protection for the application file

    Protected - Protection policies safeguard intellectual property by making the file Read-only or Protected(Logic not visible)

## Calling Script Include from a diffrent scope will require you to call the API of the Scope

## GxP for Script Include
    -   Prepend the Script Include name with the unique scope namespace when calling Script Includes from different scopes.
    -   Use GlideAjax when you need to call from a client-side Script
    -   Use Character delimited strings or JSON objects when passing multiple pieces of data from the server back to the client
    -   Include a debug flag within select script includes on your instance to enable/disable debugging.


## Core Concepts of Script Include
    -   Script Includes contain reusable code
    -   Script Includes execute only when called
    -   Classless Script Includes are callable only from server-side scripts
    -   Use GlideAjax when passing data between the client and server
    -   JSON objects pass data as arrays or objects
    -   Privately scoped Script Includes can only be called by other scripts in the same scope

#################### Module 9 #########################
Flow Designer Scripting

Flow Designer Objects

# When to use Flow Designer?
    Use Flow Designer to develop new flows or when there is a need for a major redesign to an 
    existing Workflow developed in the Workflow Editor.
# When to use Workflow Editor?
    Use the Workflow Editor to manage existing Workflows that are still functioning as expected.

## Overview: What is Flow Designer?
    Design environment that creates Flows
    Flows consist of a trigger and at least one action
    Triggers start a flow
    Actions automate processes or record operations
    Subflows are a sequence of reusable actions

## Navigatation> Process Automation> Flow Designer 

## Overview: Actions 
    -   A group of reusable operations that automate the Now Platform features without having to write code.
    -   Process Analysts can use Actions, Flow Logic or Subflows.

# Inline Script
    Enables users with coding experience to write inline scripts that set and modify input values during
    the configuration of an action or flow.

#Complex Data
    Provides an easy to understand, configurable and graphical organization of complex structured data
    Allows structured data to be encoded and stored in a machine-readable format,such as JSON or XML

# FlowAPI
    - Available outside of Flow Designer (Scripis- Background, Business Rules)
    - Available inside Flow Designer (execute Flow B in Flow A via JavaScript)

# FlowScriptAPI
    -   Available only inside Flow Designer

##### Script Triggered Subflows
Subflows are a sequence of reusable actions that can be started from a Flow, Subflow or Script

#Script-Triggered Subflow: Making a Subflow Run
    -   Server Scripts (Business Rules, UI Actions and Script Includes) and Client Scripts can call a 
        published subflow with code
    
    -   Subflows can be executed in the foreground or in the background (synchronous or asynchronous) 
    -   The Client-side JavaScript library (GlideFlow) uses promise objects that provide an eventual result of
        an asynchronous operation
    -   There is a Code Snippet Generator!

## Action Designer Script Step: Custom Actions
    -   Use Custom Actions when there is a need for functionality that the ServiceNow provided Actions do not provide
    -   Design a Custom Action for reusability
    -   Within the Steps Panel, the Action Outline contains the parts of an Action

#   Action Designer Script Step: Inputs and Outputs
    -   Inputs and Outputs are data variables used in your action.
    -   Inputs store the information passed to the action in the Data Panel and can be used in the Action Step.
    -   Outputs return data back to the flow to be used by the flow or other actions.

###Should I use a Subflow or an Action?
Requires:                   SubflowW    Action
One or two steps/actions    X           X
Multiple steps/actions      X
Flow logic                  X
Custom scripts                          X


# Core Concepts of Flow Designer
    -   Flow Designer has reached parity with Workflow and should be used for all new development and major redesigns
    -   The natural language and low-code approach to flow creation makes it easy for many roles
    -   Actions and subflows provide reusable business logic across multiple flows
    -   Action and subflows easy discovery helps with the flow creation process
    -   Evaluate the core actions before scripting a custom action



#########################################################################
#########################################################################
APPLICATION DEVELOPEMENT FUNDAMENTALS
#########################################################################
#########################################################################

Module 1: Application Development Overview
#Mod 1.1 Application Development Concepts

## Types of Application
1. ServiceNow Applications
2. Partner Application 
3. Custom Application 

#Why To develop a custom Application 
    -   To replace outdated, inadequate, custom business applications and processes
    -   To extend service delivery and management to all enterprise departments
    -   To extend the value of ServiceNow
    -   To bring greater levels of automation and consolidation to enterprise services and their management

##Should I Build It?
#####Good Fit
    -   Data can be modeled in a relational database
    -   Extensive use of forms to interact with data
    -   Requires reporting capability
    -   Need workflow/flow to manage processes
    -   Can extend existing functionality through JavaScript

###Bad Fit
    -   Data is unstructured, such as audio or video
    -   Requires access to proprietary libraries that do not have an API
    -   Multi-player games or applications requiring graphics engines
    -   No process flow through application

#Mod 1.2 Scoped Application Model

## Philosphy of Scoped Apps 
    -   Apps should be able to be unistalled
    -   Apps should only access what they need
    -   Apps should NOT break the entire system
    -   Apps should NOT break other Apps
    -   Apps should have clearly defined dependencies 
    -   Apps should be self contained

NOTE: In scoped application all of the artifcats have a seperate namespace with the application 
    Scoped application supports Delegated Development
    There is a facility for Source control Integration  
    Publish to App repository ability also present
    Easy file management 

## Scope and Namespace

What is a namespace: 
    #PREFIX(x_/u_):
    Scoped application always starts with an x_ prefix or u_ prefix, u_ signifies user created global scope, x_ is scoped application 
    #CUSTOMER PREFIX:
    The instance customer prefix:
    This is a 2-5 characters long. ServiceNow generates this prefix for each customer, the instance stores the prefix in the    
    ###glide.appcreator.company.code system property###

    #Applicaiton ID:
    This string can be 40 char long, it is shorten to 18 or less depending on the availablity

    Example: x_acme_book_rooms
    x_ - means scoped application
    acme - Company Code
    book_rooms - the Application ID

    Now once the namespace is defined all the artifcats like UI policies and Client Script will be linked to this 
    particular scoped application via the namespaces.

    Determine Scope
    General Rule
    -   Use scoped applications where possible to reduce complexity and maintain a controlled and 
        distributed development process
    -   Examples
            A custom application
            A new utility, integration, or service
            Customizations to scoped applications should be done in scope
        
    -   Exceptions
            Modifications to global applications
            Required resources not available from scopes
            Extensive reliance on global resources

#Mod 1.3 Application Development VS Application Deployment

## Development
# Update Sets
    -   Construction of the next unit of deployment
    -   Individuals and teams often manage multiple work streams

# Deployment
    -   Update Sets
    -   Application Repository
        Application of completed units of development to production
        Execution of a change management process

## What is an Update Set?
    -   Container for capturing customizations
    -   Used to move customizations between instances
    -   Essential for:
            Customizing baseline applications
            Customizing applications purchased from the store
    -   Useful for:
            Keeping track of why a change was made
            Exporting work in progress ahead of a clone
            Associating changes with SDLC artifacts
            Stories, problems, bugs, enhancements, etc.
            Deploying an application if the app repo is unavailable

##What is the ServiceNow App Repository?
    -   A place for a company to share applications ready for distribution between its instances
            glide.appcreator.company.code value must be the same on all instances (maint only property)
    -   Standardizes apps and app versions installed on instances
    -   Easily install/uninstaill/Update apps
            admin role required

##Application Repository
    Allows development teams to deploy completed applications to other instances as a whole

## Full Stack Development
    It's Very Simple.
    What we are trying to implement is Continual Integration and Continuous Deployment (CI/CD)
    
    Suppose the dev team has finished building a new feature, they commit it to a new branch which then gets 
    tested out in the Test instance and once it clears it is merged with the master branch which then Deploys it to production

    #Core Concepts
    -   ServiceNow provides a cloud-based platform for application creation
    -   Request-fulfill applications are well suited to the Now platform
    -   ServiceNow provides various tools to support processes for development and deployment. 
            Use the tool that is right for you and stick with it.
    -   Use the application built in class as the basis for applications for your business

Module 2: Application Analysis and Design

## The content of the Vidoe is same as that of the Book provided by SNOW
##########################################################################
WILL BE ENDING THE NOTES HERE
#########################################################################