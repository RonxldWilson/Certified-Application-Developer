Certified Appication Developer

SNOW is table Triggered JavaScript

Scripting Overview

1. What is platform Scripting?
Platform Scripting allows complex configuartion and behaviours via JS

However, when making changes to your instance use the Condition Builder wherever possible to 
configure starightforward conditions and actions

SNOW whenever goes to read a table it reads the other supporting tables like UI policies and other tables and when
it encounters these tables and the JS script written in it, then it runs the JS scripts

2. Why to not script in SNOW?
    a. SNOW is continually evolving and the earlier scripts may not be necessary
    b. Easier to debug and fix configuration changes thatn customization
    c. Make sure the script is really needed
        1. How business critical is this script
        2. Will an ACL perform what is needed instead?
        3. Can you acheive at least 805 of requirements via configuration changes instead of scripting
    d. consider ways of customizing without scripting

3. When should you script?
    a. Add new functionality
    b. Extend existing functionality
    c. Guide users through messaging
    d. Automate processes
    e. Interact with third party applications

4. Customization best practices

SNOW is always trying to make the upgrade process easier. Adopting this process help wiht future upgrades to your instance 

If a No code/Low code approach cannot be determined then Modify the baseline records and Review and revert the skipped record adter an Upgrade

5. Where do scripts execute?
    a. Client Side (Browser):
        -   Auto-populate a field based on value of another field 
        -   show hidden form sections

    #   Client Scripts
        UI Policies
        Catalog Scripting

    b. Server Side
        -   Modify a database record
        -   Trigger a flow

    #   Business Rules
        GlideSystem
        GlideRecord
        Script Includes
        Flow Designer
    
    c. On a Mid Server
        -   Integrate to a third party application

6. Who can Script?
    a. System Admininstrator
        Manages all the features, applications and data in the platform 
    b. System Definition Admininstrator
        Manage a specific systme Definition 
        Ex: Can only manage Business Rules
    c. Application Admininstrator

7. How to script in SNOW?
    Using Script editor available in the SNP 

8. Syntax editor Macros
    These provides shourtcuts for commonly used code
    Insert a macro by typing the macro Name and pressing <TAB>
    Macro name is replaced with full macro text

RESULT: of help <TAB>

The Syntax Editor macros are:
-----------------------------
testNewFunctions - Use this Macro to test the functions from the ValidatorNew script include
doc - Documentation Header 
for - Standard loop for arrays
vargror - Example GlideRecord Or Query
info - 
method - Standard JavaScript Class Method
vargr - A common pattern of creating and querying a GlideRecord

####

Locating your script Quickly

Navigate directly to Table configuartion

Ex: incident.config will display all the configuartion changes made to that table

### Application Scopes

Every Application has a scope
Determines which resources are availableto other application
Once the scope is assigned to an application, it cannot be changed!!!

Application Scopes protects an application and its artifcacts from damage to, or from other applications
Must be configured to grant other applicationthe ablity to act on its record

# Application Scope: Scope Namespace Identifier

The system automatically prefixes a namespace identifier to scoped application artifcats (including scripts)
Canneot be changed or removed to ensure they are always associated with the proper application

    Scoped application artifcacts always begins wiht x_
    Then the vendor prefix, SNC 
    Then the application ID - Set when the application is first created
    Script Name - unique script name

    This example generates the namespace identifier: x_cld_travel_ExpensesReqBy


# Application Scope: Updating Scripts in Another Scope

Out of scope scripts are read-only

# JS in SNOW

Client Side Classes
    GlideAjax#
    GlideForm*
    GlideList*
    GlideRecord#
    GlideUser 
    GlideList
    spModal - Used for Mobile user popups and stuff

    * Mostly used for visual changes
    # Also used in Server Side/ Data ceter side

Server Side Classes
    GlideAggregate
    GlideDateTime
    GlideElement
    GlideRecord
    GlideQuery
    GlideSystem
    JSON
    Workflow

JS in SNOW - API Documentation 
Available at: https://developer.servicenow.com/dev.do#!/home

Click on References and APIs: 
    Server Scoped
    Server Global


############ Mod 2 ###############
Client Script Overview: What is a Client Script?
Client Script manage the behaviour of forms, fields and lists in real time.
    -   Make fields Mandatory
    -   Set one field in response to another
    -   Modify choice list options
    -   Hide/show form sections
    -   Hide/fields
    -   Display an alert
    -   Manage/prohibit list ending

Client script executes on client side - Browser may present the info in a different way

Client scripts are not secured, since the info is already loaded in the browser, therefore it should not be used for 
critical access controlling. Use ACLs for those

#Client Scripts are a record in the Client script table
Client scripts table will only run when the conditions are triggered

Diffrent types on Client Scripts
1. onLoad() - will run when the form is loaded and before the control is given to the user
    Typically used to mainpulate a form's appearance or content on the screen
    No argumet present in the onLoad() client script function
2. onSubmit() - Script runs when a form is saved, updated or submitted
    Typically used for field validation
    No argumet present in the onSubmit() client script function
3. onChange() - Script runs when a particular field value changes
    Typically used to
        -   Respond to fild values of interest
        -   Modify one field value in response to another

    Need to define a field onChange script will run.
    It has 5 arguments for it.

    All field values changes when a form loads
    The onChange() Template's if statement aborts script executiong if:
        -   Field value change due to form load
        -   The newValue has no value
4. onCellEdit() - This is executed in list View and not the form View
    Since in the list view it is possible to edit multiple cells at the same time
    the function takes in the parameter as 'oldValues' instead of 'oldValue' like in onChange()

    Using this we can modify multiple records at the same time

##### Client Side APIs
# Client-side APls: What Data Can You See in a Client Script?

Use ServiceNow's predefined client-side classes and methods to
    - Control how the platform looks and behaves in a web browser
    - Enhance the end user experience
    This class reviews the most popular Client-side APls
    -   g_form (GlideForm)
    -   g_User (GlideUser)
    -   g_scratchpad (in conjunction with a Display Business Rule)

Anytime there is a mention of 'g_' it signifies that it is happening in the clien side

#Glide is the original name of SNOW - GlideSoft


GlideForm API provides useful method to
    -   Customize forms 
    -   Manage form fields and their data

commonly used g_form method examples:
    - Draw attention to an area on the form: flash(), showFieldMsg()
    - Get field information: getValue)
    - Change a field value: setValue(), clearValue()
    - Change a choice list: add0ption(), clearOptions()
    - Get form information: getSections(), isNewRecord()
    - Add/clear form messages: addFormMessage(), clearAllFormMessages()

NOTE: 
    -   g_form object methods refer to fields by their field name, not their label
    Easy way to locate a field name
        -   Right-click a field's label
        -   The field name appears on the Context menu

Use Developers portal to get more info on the g_form global object or other objects for in-depth Documentation

# getValue method
    g_form.getValue() is a very commonly used g_form method
    Retrieves a field value from the form (not the database)
    Pay close attention to the field's data type when using this method

For Example: g_form.getValue for a string will return string but for a choice it will return an integer

getValue on a Reference fields will return the Sys_Id

## Glide user
Glide user API provides useful methods to access info about the currently logged in user
Access GlideUser Methods using the g_user global object

Note: g_user is globally scopeed


## Client Script Debugging
    Many times, your scripts do not work as expected
    You can debug them using the following strategies:
        - ServiceNow built-in client-side debugging tools
            Script debug messages
            Response Time Indicator
        - Javascript debugging tools
            alert()
            try/catch
        - Browser tools (for example, JavaScript console, Web Console)
        - Third-party tools

You can use addInfoMessage() also to co do debugging as it can be a lot more convinient to do so

Response time Indicator, it is available in the lower right corner, the clock shows the amount of time spent
on processing on the client side, server side and the network

For JS bsaed debugging you can use

try{

} catch(){

}

## Reference Objects
Reference Object records exist on a table other than a form's currently loaded table
Reference Object data is not loaded into forms
Client-side scripts only have access to data on forms

Now how do we get the data of that reference object??

# Reference Objects: Scripting with Reference Objects
- Forms only store a Reference Object's sys_id
- Reference Object fields cannot be directly referenced from a Client Script
- Retrieving Reference Object fields requires a trip to the server and back
    - Server trips take time
    - Make as few trips as possible!

## Script Table is a related table to Client Script

    Track changes to the record
    Created automatically every time a script is saved, submitted or updated
    Can compare versions to see differences
    Can revert to a previous version of a script

## Recap of Client Script
    Core Concepts
        Client Scripts execute in the browser
        Ihe g_form object has access to a form's fields and data
        The g_user object has access to information about the curently logged-in user
        Design your scripts for Desktop, Mobile/Service Portal or All
        Quickly undo changes by reverting to an older version of a script


######## Module 3 ############
## UI Policy

What is a Ul Policy?
Defines the behavior and visibility of fields on
    - Mandatory
    - Visible
    - Read-only
Condition must be true for it to execute on a form
Executes after Client Scripts

Example: After Ul Policy executes
    'Number is read-only
    'Configuration item' is mandatory
    'Priority' is not visible

UI Policy execution:
1. Trigger specifies when to execute
2. UI Policy Actions and/or Scripts specify what to execute
3. Every field in the record can be evaluated even if it is not visible on the form 
4. UI Policies do not have a Name field
    Use the Short description field as a pseudo name
5. Not all UI Policies require scripting

#UI Policy Trigger When to Apply
1. UI Policies execute based on evaluation of the Conditions
    - Build conditions with the Condition Builder rather than scripting for better performance
    - If left blank, the UI Policy logic always executes

Application need:                   |   Client Script    | UI Policy
Execute on form load                |X                   |X
Execute on form save/submit/update  |X                   |                   
Execute on form field value change  |X                   |X
Have access to a field's prior value|X                   |
Execute on list field value change  |X                   |
Execute after Client Scripts        |                    |X
Require scripting                   |X                   |


# Good Practice
1. Use as few UI Policies as possible to avoid long page load times
2. Use the short descriptionfield to name the UI policy 
3. Add the description field ot form to thorughly document the UI Policy
4. Set onLoad to false if you do not need to execute on page load 
5. Apply conditions using the condition builder, whenever possible

# Core Concepts of UI policy
1. UI Policies are used for client-side form management
2. UI Policies take actions based on scripts and/or UI Policy Actions
3. UI Policies can be created for tables in the same scope
4. Debug Ul Policies using addlnfoMessage() and addErorMessage()
5. Different actions are available if the condition returns true or false

## Catalog Client Scriptand Catalog UI Policies
This manages teh behaviour of catlog items when presented to users

#Everything on a service catlog form is a service catalog variable set and not a field in a table
# Example use case
    -   Suppose a certain variable of choice has been marked as true, then the corresponding field should be
        auto-filled. This can be achieved thru using catalog client scripts

# There is seperate table for: "Catalog Client Script"
It is same as general client script, and works mostly in the same manner

Similar to UI Policy we have Catalog UI Policy
1. Manages the behavior of Catalog Items when presented to your users 
2. Offers the use of theCondition builder to easily configure a condition vs.Scripting it
3. Condition must be true for the policy to execute

## Variable SETS   ## Important
1. Catalog Client scripts and Catalog UI Policies can also apply to Variable set
2. Executes every time the variable set is used

otherwise you will have to create the same catlog UI policy for all the individual catlog item, that is too much work
Just use it using Variable set and make a catalog UI policy on it or write a catlog client Scripts

Both Catalog Item variables and Variable Set variables are available to Catalog Client Scripts and Catalog UI Policies
Allows you to manage the behavior of any variable at the Catalog Item level

# What Data Can You See in Catalog Client Scripts and Catalog UI Policies?
    -   Local variables declared in a script
    -   Predefined client-side Global variables, such as
        - g_form (GlideForm)
        - g_user (GlideUser)

## Core Concepts of catalog Client Scripts & Catalog UI Policies
    -Catalog Client Scripts and Catalog Ul Policies manage the behavior of Catalog ltems
    -Execute in the browser
    -Variables in a condition mUst be visible (even if it is hidden or read-only) on the form layout for the
    condition to be tested
    -Catalog Client Scripts and Catalog UI Policies can also be applied to Variable Sets
    -Behavior of variables can be managed at the Variable Set level or the Catalog Item level


############ Business Rule ##############

# What is BR?
    JavaScript that runs when
    -   A table is queried
    -   A record is displayed, inserted, updated or deleted (CRUD operations)
    Can be used to change values in fields when certain conditions are met

    Execute server-side
    - Faster
    - Does not monitor forms or lists

# When BR runs?
- Watches the database for record access and responds to select access types 
- Trigger specifies when to run (execute)
- Not all Business Rules require scripting

# Different types of BR
1. Before Query Rules 
2. Display
3. Before Rules 
4. After Rules
5. Async Rules

# What BR Executes?

    ACTION                  BR Execution        ACTION              BR Execution    ACTION
User or System Query -> Before Query Rules  -> Database Query -> Display Rule -> Form Submit
                        (QVR)//aka Query rule 
    BR Execution    ACTION              BR Execution    BR Execution
-> Before Rules -> Database Update  -> After Rules -> Async Rules 


    ACTION                  |   BR Execution
1. User or System query     |   Before Query Rule / Query Rule aka QVR
2. Database Query           |   Display Rules //When it is rendering but before you get the control
3. Form Submit              |   Before Rules
4. Database Update          |   After Rules 
5.                          |   Async Rules

## Types of BR
1. Before Query BR/ Query Rule: 
    Executes before a query is sent to the database
    -This can be used to reduce what the user is able to see, since we will have access to the entire server
    Example: Prevent users from one location seeing CIs from another

2. Display Rules: No control is given to the user 

    -    Execute after the data is read from the database and before the form is presented to the user
    -   Primary purpose is to populate the g_scratchpad global object
    -   Example: Provide Client Scripts with access to data from other records

3. Before Business Rules
    Execute after form submission and before record is updated in the database
    Example: Populate 'closed_by' with the name of the currently logged in user

    It interupts the operation right before it happens

4. After Business Rule:
    Execute after form submission and record update in the database
    Example: Cascade changes made to the approval field of a Service Catalog request to the requested items attached to that request

5. Async Business Rule:
    Execute after records are inserted/modified/queried
    Run asynchronously as Scheduled Jobs
    - Notify subscribers when Cls are affected by an Incident
    - SLA calculations

# What Business Rules Execute?
    BR executes their corresponding Actions, you can set field values/show message/ supress the record OR set abort action
    Dynamic Syntaxing is also possible in BR messages
        Ex: Incident ${Number} opened successfuly
    
    Advanced Tab in BR
    1. Codition Filter is available in the Advanced tab 
    2. Script Segment: 


## Server-side Global Variables 

# What data can you see in a BR?
    -   Local Variable declared in a script
    -   Predefined server-side Global Variables
        -   current
        -   previous
        -   g_scratchpad
                Display BR only
                Works in conjunction with a client script

    EXPLANATION: Now in client side to get the value of a particular field we need to use:
        g_form.getValue('short_description) and then assign it to a variable but in 

    Server-Side: There is no need to do all this just using:
        - current.short_description will get the current value in the server-side
        - similarlly previous.short_description will get what was previously stored on the server-side
            
            previous bascically gives what is the value currently scored in Server

        Now g_scratchpad is just

        if(current.state >= 5 && previous.state < 5) {
            var reOpened = true;
            g_scratchpad.createdBy = current.sys_created_by;
            g_scratchpad.caller = current.caller_id;
        }

##########################################
Everything in SNOW is a record in a table
#########################################
Every SNOW record is a JS Object or GlideRecord object

## Dot-Walking
Allows direct access to fields for related records (reference objects) by traversing tables
    EXAMPLE:
    <object>.<reference object name>,<field of interest>
    current.caller_id.department.name Example


To assist in Dot Walking there is something called as Script tree which helps in finding the existence of the 
value in a related table

Dot Walking works only with ServerSide scripting and doesn't work with Client Side Scripting

# Server-side debugging

    Server Side Debugging tools
        GlideSystem logging methods
        Debug Business Rules module
        Script Debugger
        Script Tracer
        Console Debugger
    
    JS debugger
    Try/Catch/Finally 

################################################
gs - stands for GlideSystem     i.e., Server-side

################################
Sends debugging information to the system log

gs.info() - Used for informational events, such as messages that describe the progress of the application.
gs.log() - This always logs a message when used in the global scope.
gs.eror() - Used for critical errors that are encountered; the issue is logged.
gs.warn() - Used for logging; ocCurs when there might be an issue.
gs.debug() Logging occurs when in debug mode or when session debug for that application is enabled.


Sends debugging info to the top of the form:

gs.addlnfoMessage()
gs.addErrorMessage(
gs.methodName(<message>);
gs.info("The record was opened: " +CUrent.opened_at);

###########
Important - USE SCRIPT DEBUGGER TO DO PROPER DEBUGGING 
###########
To debug your code properly use "Script Debugger" available in system diagnostics

Used for debugging server-side JavaScript
-Opens in a separate browser window along with Script Tracer and the Session Log
###########
